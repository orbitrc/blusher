#!/usr/bin/env python3

import sys
import os
import json

APPIMAGETOOL_URL = 'https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage'

def is_toolchain_installed():
    if os.path.isfile(os.environ['HOME'] + '/.blusher/toolchains/appimagetool-x86_64.AppImage'):
        return True
    print('* Toolchain is not downloaded.')
    return False

def install_toolchain():
    print('* Downloading toolchain...')
    os.system('mkdir -p ' + os.environ['HOME'] + '/.blusher/toolchains')
    print(' - Download files.')
    os.system('wget {url} -O {target}'.format(
        url=APPIMAGETOOL_URL,
        target=os.environ['HOME'] + '/.blusher/toolchains/appimagetool-x86_64.AppImage'))
    print(' - Add executable to the binary.')
    os.system('chmod +x {}'.format(os.environ['HOME'] + '/.blusher/toolchains/appimagetool-x86_64.AppImage'))


def get_blusher_app_struct():
    print('* Gathering informations...')
    if os.path.isfile('blusher-app.json') is False:
        print(os.path.abspath('.') + '/blusher-app.json file could not found.')
        exit(1)
    f = open('blusher-app.json', 'r')
    blusher_app_json = f.read()
    f.close()

    blusher_app = json.loads(blusher_app_json)
    return blusher_app


def get_bin_name(blusher_app):
    if blusher_app.get('bin') is not None:
        return blusher_app['bin']
    return blusher_app['name']


def make_qmake_file(blusher_app, debug=False):
    source = ''
    source += 'QT = gui quick\n'
    source += 'CONFIG += c++11\n'
    source += 'CONFIG -= qtquickcompiler\n'
    source += 'DEFINES += QT_DEPRECATED_WARNINGS\n'
    source += 'DEFINES += BLUSHER_APP_VERSION=\\\\\\"$$VERSION\\\\\\" \n'
    source += 'DEFINES += "BLUSHER_APP_NAME=\\\\\\"' + blusher_app['name'].replace(' ', '\\ ') + '\\\\\\"" \n'
    source += 'DEFINES += BLUSHER_PATH=\\\\\\"/usr/lib/blusher/qml\\\\\\"\n'
    if debug:
        source += 'DEFINES += BLUSHER_DEBUG\n'

    if blusher_app.get('qtCppHeaders') is not None:
        source += 'HEADERS +='
        for h in blusher_app['qtCppHeaders']:
            source += (' ' + h)
        source += '\n'

    source += 'SOURCES +='
    for src in blusher_app['qtCppSources']:
        source += (' ' + src)
    source += '\n'

    source += 'RESOURCES += qml.qrc'

    source += '\n'
    if debug is False:
        source += get_bin_name(blusher_app)
    else:
        source += 'TARGET = a.out\n'

    f = open('blusher_qt_qmake_tmp.pro', 'w')
    f.write(source)
    f.close()

def make_appdir_structure(blusher_app):
    os.mkdir('AppDir')
    os.mkdir('AppDir/usr')
    os.mkdir('AppDir/usr/bin')
    os.mkdir('AppDir/usr/lib')
    os.mkdir('AppDir/usr/share')
    os.mkdir('AppDir/usr/share/applications')
    os.mkdir('AppDir/usr/share/icons')

def blusher_create():
    """
 +-- my-app
 |---- .gitignore
 |---- blusher-app.json
 |---- qml.qrc
 |---- src/
 |      |-- components/
 |      +-- modules/
 |---- AppDir/
    """
    pass


def blusher_debug():
    '''
    $ blusher debug
    '''
    print('* blusher debug')
    blusher_app = get_blusher_app_struct()

    print(' - Name: ' + blusher_app['name'])
    print(' - Version: ' + blusher_app['version'])

    if os.path.isdir('debug') is False:
        os.mkdir('debug')

    qmake_file = 'blusher_qt_qmake_tmp.pro'
    if blusher_app.get('qtProject') is not None:
        qmake_file = blusher_app['qtProject']
    else:
        make_qmake_file(blusher_app, debug=True)

    os.system('cd debug && qmake ../' + qmake_file + ' ' \
        + ' -spec linux-g++ ' \
        + '"BLUSHER_APP_NAME=\\"' + blusher_app['name'].replace(' ', '\\ ') + '\\"" ' \
        + '"VERSION=' + blusher_app['version'] + '" ' \
        + ' CONFIG+=debug CONFIG+=qml_debug && make qmake_all')
    os.system('cd debug && make -j8')

    # Copy components and modules.
    os.system('rm -rf debug/components debug/modules')
    os.system('cp -r src/components debug/components')
    os.system('cp -r src/modules debug/modules')

    # Make executable script.
    script = '''#!/bin/sh
BASEDIR=$(dirname $(readlink -f $0))

export QML2_IMPORT_PATH=$BASEDIR/components
export QML2_IMPORT_PATH=$BASEDIR/modules

$BASEDIR/a.out
'''

    bin_name = get_bin_name(blusher_app)
    f = open('debug/' + bin_name, 'w')
    f.write(script)
    f.close()

    os.system('chmod +x debug/' + bin_name)

def blusher_build():
    '''
    $ blusher build
    '''
    print('* blusher build')
    blusher_app = get_blusher_app_struct()

    print(' - Name: ' + blusher_app['name'])
    print(' - Version: ' + blusher_app['version'])

    if os.path.isdir('build') is False:
        os.mkdir('build')

    qmake_file = 'blusher_qt_qmake_tmp.pro'
    if blusher_app.get('qtProject') is not None:
        qmake_file = blusher_app['qtProject']
    else:
        make_qmake_file(blusher_app, debug=True)

    bin_name = blusher_app['name']
    if blusher_app.get('bin') is not None:
        bin_name = blusher_app['bin']

    os.system('cd build && qmake ../' + qmake_file + ' ' \
        + ' -spec linux-g++ ' \
        + '"BLUSHER_APP_NAME=\\"' + blusher_app['name'].replace(' ', '\\ ') + '\\"" ' \
        + '"VERSION=' + blusher_app['version'] + '" ' \
        + ' TARGET="' + bin_name.replace(' ', '\\ ') + '" && make qmake_all')
    os.system('cd build && make -j8')

    # Make AppImage.
    if os.path.isdir('AppDir/usr/bin') is False:
        os.mkdir('AppDir/usr')
        os.mkdir('AppDir/usr/bin')
    os.system('cp build/' + bin_name + ' AppDir/usr/bin')
    os.system('rm -f AppDir/AppRun')
    os.system('ln -s usr/bin/' + bin_name + ' AppDir/AppRun')
    os.system(os.environ['HOME'] + '/.blusher-dev/appimagetool-x86_64.AppImage AppDir')
    os.system('mv ' + bin_name + '-x86_64.AppImage ' + bin_name + '.AppImage')


if __name__ == '__main__':
    if len(sys.argv) < 2:
        print('Usage:\n\tblusher build|debug|create')
    else:
        # Check toolchain
        if is_toolchain_installed() is not True:
            install_toolchain()

        if sys.argv[1] == 'debug':
            blusher_debug()

        elif sys.argv[1] == 'build':
            blusher_build()
            # os.system('cp AppDir/-.desktop')
