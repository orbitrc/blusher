import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable Blusher 0.1 .'

Module {
    dependencies: [
        "QtGraphicalEffects 1.12",
        "QtQml 2.15",
        "QtQml.Models 2.15",
        "QtQml.WorkerScript 2.15",
        "QtQuick 2.12",
        "QtQuick.Layouts 1.12",
        "QtQuick.Window 2.12"
    ]
    Component {
        name: "bl::Anchors"
        prototype: "QObject"
        exports: ["Blusher/Anchors 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "fill"; type: "QQuickItem"; isPointer: true }
        Property { name: "centerIn"; type: "QQuickItem"; isPointer: true }
        Property { name: "top"; type: "AnchorLine" }
        Property { name: "left"; type: "AnchorLine" }
        Property { name: "right"; type: "AnchorLine" }
        Property { name: "bottom"; type: "AnchorLine" }
        Property { name: "horizontalCenter"; type: "AnchorLine" }
        Property { name: "verticalCenter"; type: "AnchorLine" }
        Property { name: "topMargin"; type: "double" }
        Property { name: "leftMargin"; type: "double" }
        Property { name: "rightMargin"; type: "double" }
        Property { name: "bottomMargin"; type: "double" }
        Signal {
            name: "topMarginChanged"
            Parameter { name: "topMargin"; type: "double" }
        }
        Signal {
            name: "leftMarginChanged"
            Parameter { name: "leftMargin"; type: "double" }
        }
        Signal {
            name: "rightMarginChanged"
            Parameter { name: "rightMargin"; type: "double" }
        }
        Signal {
            name: "bottomMarginChanged"
            Parameter { name: "bottomMargin"; type: "double" }
        }
    }
    Component {
        name: "bl::BaseWindow"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: ["Blusher/BaseWindow 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "WindowType"
            values: {
                "DocumentWindow": 0,
                "AppWindow": 1,
                "Panel": 2,
                "Dialog": 3,
                "Alert": 4,
                "Menu": 5
            }
        }
        Enum {
            name: "NetWmWindowType"
            values: {
                "Desktop": 0,
                "Dock": 1,
                "Toolbar": 2,
                "Menu": 3,
                "Utility": 4,
                "Splash": 5,
                "Dialog": 6,
                "DropDownMenu": 7,
                "PopUpMenu": 8,
                "ToolTip": 9,
                "Notification": 10,
                "Combo": 11,
                "Dnd": 12,
                "Normal": 13
            }
        }
        Property { name: "netWmStrutPartial"; type: "QList<int>" }
        Property { name: "netWmWindowType"; type: "int" }
        Property { name: "onAllDesktops"; type: "bool" }
        Property { name: "transientFor"; type: "int" }
        Property { name: "type"; type: "int" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "menu"; type: "Menu"; isPointer: true }
        Property { name: "screenScale"; type: "double"; isReadonly: true }
        Property { name: "screenName"; type: "string"; isReadonly: true }
        Property { name: "windowId"; type: "int"; isReadonly: true }
        Property { name: "top"; type: "AnchorLine"; isReadonly: true }
        Property { name: "bottom"; type: "AnchorLine"; isReadonly: true }
        Signal {
            name: "netWmStrutPartialChanged"
            Parameter { name: "strut"; type: "QList<int>" }
        }
        Signal {
            name: "onAllDesktopsChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "transientForChanged"
            Parameter { name: "windowId"; type: "int" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "x"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "y"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "width"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "height"; type: "int" }
        }
        Signal {
            name: "screenScaleChanged"
            Parameter { name: "scale"; type: "double" }
        }
        Signal {
            name: "keyPressed"
            Parameter { name: "event"; type: "KeyEvent"; isPointer: true }
        }
        Method { name: "changeScale" }
    }
    Component {
        name: "bl::Blusher"
        prototype: "QObject"
        exports: ["Blusher/Blusher 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "KeyModifier"
            values: {
                "None": 0,
                "Shift": 16777216,
                "Control": 33554432,
                "Alt": 67108864,
                "Super": 134217728
            }
        }
        Signal { name: "appChanged" }
        Signal { name: "menuClosed" }
        Signal { name: "menuClosedByUser" }
        Method {
            name: "copyTextToClipboard"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "setMenuBarRect"
            Parameter { name: "rect"; type: "QRectF" }
        }
        Method {
            name: "setMenuBarMenuItemRect"
            Parameter { name: "rect"; type: "QRectF" }
        }
    }
    Component {
        name: "bl::Box"
        defaultProperty: "data"
        prototype: "bl::View"
        exports: ["Blusher/Box 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Property { name: "radius"; type: "double" }
        Property { name: "topLeftRadius"; type: "double" }
        Property { name: "topRightRadius"; type: "double" }
        Property { name: "bottomLeftRadius"; type: "double" }
        Property { name: "bottomRightRadius"; type: "double" }
        Property { name: "borderWidth"; type: "double" }
        Property { name: "borderColor"; type: "QColor" }
    }
    Component {
        name: "bl::DesktopEnvironment"
        prototype: "QObject"
        exports: ["Blusher/DesktopEnvironmentPlugin 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "screens"; type: "QList<bl::ScreenInfo*>"; isReadonly: true }
        Property { name: "primaryScreen"; type: "QVariantMap"; isReadonly: true }
        Signal {
            name: "screenAdded"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "screenRemoved"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "screenScaleChanged"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "scale"; type: "double" }
        }
        Signal {
            name: "screenInfoChanged"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "changeScale"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "scale"; type: "double" }
        }
    }
    Component {
        name: "bl::KeyEvent"
        prototype: "QObject"
        exports: ["Blusher/KeyEvent 0.1"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "modifiers"; type: "int"; isReadonly: true }
        Property { name: "key"; type: "int"; isReadonly: true }
    }
    Component {
        name: "bl::Menu"
        defaultProperty: "items"
        prototype: "QObject"
        exports: ["Blusher/Menu 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MenuType"
            values: {
                "MenuBarMenu": 0,
                "ContextualMenu": 1,
                "Submenu": 2
            }
        }
        Property { name: "type"; type: "int" }
        Property { name: "title"; type: "string" }
        Property { name: "items"; type: "bl::MenuItem"; isList: true; isReadonly: true }
        Property { name: "opened"; type: "bool"; isReadonly: true }
        Property { name: "supermenu"; type: "Menu"; isPointer: true }
        Property { name: "activeIndex"; type: "int" }
        Signal {
            name: "openedChanged"
            Parameter { name: "value"; type: "bool" }
        }
        Signal {
            name: "activeIndexChanged"
            Parameter { name: "index"; type: "int" }
        }
        Signal { name: "closing" }
        Method {
            name: "addItem"
            Parameter { name: "item"; type: "MenuItem"; isPointer: true }
        }
        Method {
            name: "open"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "open"
            Parameter { name: "x"; type: "double" }
        }
        Method { name: "open" }
        Method { name: "close" }
    }
    Component {
        name: "bl::MenuItem"
        prototype: "QObject"
        exports: ["Blusher/MenuItem 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "title"; type: "string" }
        Property { name: "separator"; type: "bool" }
        Property { name: "submenu"; type: "QObject"; isPointer: true }
        Property { name: "parentMenu"; type: "QObject"; isPointer: true }
        Property { name: "shortcut"; type: "int" }
        Property { name: "checked"; type: "bool" }
        Signal { name: "triggered" }
        Method { name: "isMenuBarMenuItem"; type: "bool" }
    }
    Component {
        name: "bl::View"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Blusher/View 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "scaleWidth"; type: "bool" }
        Property { name: "scaleHeight"; type: "bool" }
        Property { name: "window"; type: "BaseWindow"; isReadonly: true; isPointer: true }
        Property { name: "anchors"; type: "Anchors"; isReadonly: true; isPointer: true }
        Property { name: "top"; type: "AnchorLine"; isReadonly: true }
        Property { name: "left"; type: "AnchorLine"; isReadonly: true }
        Property { name: "right"; type: "AnchorLine"; isReadonly: true }
        Property { name: "bottom"; type: "AnchorLine"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "AnchorLine"; isReadonly: true }
        Property { name: "verticalCenter"; type: "AnchorLine"; isReadonly: true }
        Method {
            name: "scale"
            Parameter { name: "multiple"; type: "double" }
        }
        Method { name: "adjustAnchors" }
        Method { name: "clearAnchorsFill" }
        Method { name: "adjustAnchorsFill" }
        Method { name: "clearAnchorsCenterIn" }
        Method { name: "adjustAnchorsCenterIn" }
        Method { name: "clearAnchorsTopBottom" }
        Method { name: "adjustAnchorsTopBottom" }
        Method { name: "clearAnchorsLeftRight" }
        Method { name: "adjustAnchorsLeftRight" }
        Method { name: "clearAnchorsHorizontalCenter" }
        Method { name: "adjustAnchorsHorizontalCenter" }
        Method { name: "clearAnchorsVerticalCenter" }
        Method { name: "adjustAnchorsVerticalCenter" }
    }
}
