import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable Blusher 0.1 lib/blusher/qml'

Module {
    dependencies: [
        "Blusher.DesktopEnvironment.Standalone 0.1",
        "QtGraphicalEffects 1.12",
        "QtQml 2.12",
        "QtQml.Models 2.2",
        "QtQuick 2.12",
        "QtQuick.Controls 2.7",
        "QtQuick.Controls.Fusion 2.14",
        "QtQuick.Controls.Fusion.impl 2.14",
        "QtQuick.Controls.Imagine 2.14",
        "QtQuick.Controls.Imagine.impl 2.14",
        "QtQuick.Controls.Material 2.14",
        "QtQuick.Controls.Material.impl 2.14",
        "QtQuick.Controls.Styles 1.4",
        "QtQuick.Controls.Styles.Plasma 2.0",
        "QtQuick.Controls.Universal 2.14",
        "QtQuick.Controls.Universal.impl 2.12",
        "QtQuick.Controls.impl 2.14",
        "QtQuick.Extras 1.4",
        "QtQuick.Layouts 1.4",
        "QtQuick.Templates 2.7",
        "QtQuick.Window 2.2"
    ]
    Component {
        name: "BaseWindow"
        defaultProperty: "data"
        prototype: "QQuickWindow"
        exports: ["Blusher/BaseWindow 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "WindowType"
            values: {
                "DocumentWindow": 0,
                "AppWindow": 1,
                "Panel": 2,
                "Dialog": 3,
                "Alert": 4,
                "Menu": 5
            }
        }
        Property { name: "type"; type: "int" }
        Property { name: "pixelsPerDp"; type: "double"; isReadonly: true }
        Property { name: "screenName"; type: "string"; isReadonly: true }
    }
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Enum {
            name: "CheckIndexOption"
            values: {
                "NoOption": 0,
                "IndexIsValid": 1,
                "DoNotUseParent": 2,
                "ParentIsInvalid": 4
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        name: "QQmlPropertyMap"
        prototype: "QObject"
        Signal {
            name: "valueChanged"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "keys"; type: "QStringList" }
    }
    Component {
        name: "bl::Blusher"
        prototype: "QObject"
        exports: ["Blusher/Blusher 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "app"; type: "Application"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "bl::DesktopEnvironment"
        prototype: "QObject"
        exports: ["Blusher/DesktopEnvironmentPlugin 0.1"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "screens"; type: "QVariantMap"; isReadonly: true }
        Signal {
            name: "screenInfoChanged"
            Parameter { name: "name"; type: "string" }
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component {
        name: "bl::Menu"
        defaultProperty: "items"
        prototype: "QObject"
        exports: ["Blusher/Menu2 0.1"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MenuType"
            values: {
                "MenuBarMenu": 0,
                "ContextualMenu": 1,
                "Submenu": 2
            }
        }
        Property { name: "type"; type: "int" }
        Property { name: "title"; type: "string" }
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
        Method {
            name: "addItem"
            Parameter { name: "item"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "open"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "open"
            Parameter { name: "x"; type: "double" }
        }
        Method { name: "open" }
    }
    Component {
        name: "bl::MenuItem"
        prototype: "QObject"
        exports: ["Blusher/MenuItem2 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "title"; type: "string" }
        Property { name: "separator"; type: "bool" }
        Property { name: "submenu"; type: "QObject"; isPointer: true }
        Property { name: "parentMenu"; type: "QObject"; isPointer: true }
        Signal { name: "triggered" }
        Method { name: "isMenuBarMenuItem"; type: "bool" }
    }
    Component {
        name: "bl::View"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Blusher/View 0.1"]
        exportMetaObjectRevisions: [0]
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "window"; type: "BaseWindow"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "Blusher/DesktopEnvironment 0.1"
        exports: ["Blusher/DesktopEnvironment 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        isCreatable: false
        isSingleton: true
        defaultProperty: "data"
        Enum {
            name: "Cursor"
            values: {
                "Auto": 0,
                "Arrow": 1,
                "Pointer": 2,
                "IBeam": 3,
                "ResizeLeftRight": 4,
                "ResizeUpDown": 5
            }
        }
        Enum {
            name: "KeyModifier"
            values: {
                "None": 0,
                "Shift": 16777216,
                "Control": 33554432,
                "Alt": 67108864,
                "Super": 134217728
            }
        }
        Property { name: "name"; type: "string" }
        Property { name: "screens"; type: "QVariant" }
        Property { name: "pixelsPerDp"; type: "double"; isReadonly: true }
        Property { name: "app"; type: "QVariant"; isReadonly: true }
        Property { name: "menuDelegate"; type: "QVariant"; isReadonly: true }
        Property { name: "menuBarHeight"; type: "int"; isReadonly: true }
        Property { name: "shortcutToString"; type: "QVariant"; isReadonly: true }
        Property { name: "onMenuOpened"; type: "QVariant"; isReadonly: true }
        Property { name: "onMenuClosed"; type: "QVariant"; isReadonly: true }
        Property { name: "menuOpen"; type: "bool"; isReadonly: true }
        Property { name: "overlay"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "standaloneDeModule"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "icons"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "fonts"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "menus"; type: "QObject"; isReadonly: true; isPointer: true }
        Signal {
            name: "menuItemTriggered"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "menuOpened"
            type: "QVariant"
            Parameter { name: "menu"; type: "QVariant" }
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Method { name: "menuClosed"; type: "QVariant" }
        Method { name: "_popMenu"; type: "QVariant" }
        Method {
            name: "_isMenuDescendantOf"
            type: "QVariant"
            Parameter { name: "menu"; type: "QVariant" }
            Parameter { name: "target"; type: "QVariant" }
        }
        Method { name: "_initDesktopEnvironmentModule"; type: "QVariant" }
        Method {
            name: "_debugFunction"
            type: "QVariant"
            Parameter { name: "payload"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QObject"
        name: "Blusher/Formatter 0.1"
        exports: ["Blusher/Formatter 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Method {
            name: "shortcutToString"
            type: "QVariant"
            Parameter { name: "shortcut"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQmlListModel"
        name: "Blusher/Menu 0.1"
        exports: ["Blusher/Menu 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "items"
        Enum {
            name: "MenuType"
            values: {
                "MenuBarMenu": 0,
                "ContextualMenu": 1,
                "Submenu": 2
            }
        }
        Property { name: "items"; type: "QQmlListElement"; isList: true; isReadonly: true }
        Property { name: "type"; type: "int" }
        Property { name: "title"; type: "string" }
        Property { name: "supermenu"; type: "QVariant" }
        Property { name: "focusedItemIndex"; type: "int" }
        Property { name: "_private"; type: "QObject"; isPointer: true }
        Property { name: "opened"; type: "bool"; isReadonly: true }
        Method {
            name: "open"
            type: "QVariant"
            Parameter { name: "view"; type: "QVariant" }
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Method { name: "close"; type: "QVariant" }
        Method {
            name: "addItem"
            type: "QVariant"
            Parameter { name: "menuItem"; type: "QVariant" }
        }
        Method {
            name: "focusItem"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method { name: "focusFirstItem"; type: "QVariant" }
        Method { name: "focusNextItem"; type: "QVariant" }
        Method { name: "focusPreviousItem"; type: "QVariant" }
        Method { name: "focusLastItem"; type: "QVariant" }
    }
    Component {
        prototype: "QQmlListElement"
        name: "Blusher/MenuItem 0.1"
        exports: ["Blusher/MenuItem 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        Property { name: "title"; type: "string" }
        Property { name: "image"; type: "QQuickImage"; isPointer: true }
        Property { name: "separator"; type: "bool" }
        Property { name: "submenu"; type: "Menu_QMLTYPE_0"; isPointer: true }
        Property { name: "parentMenu"; type: "Menu_QMLTYPE_0"; isPointer: true }
        Property { name: "action"; type: "QVariant" }
        Property { name: "shortcut"; type: "int" }
        Property { name: "checked"; type: "bool" }
        Property { name: "submenuOpened"; type: "bool" }
        Property { name: "focused"; type: "bool" }
        Method { name: "isMenuBarMenuItem"; type: "QVariant" }
        Method { name: "hasSubmenu"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Blusher/Toolbar 0.1"
        exports: ["Blusher/Toolbar 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "items"
        Enum {
            name: "DisplayMode"
            values: {
                "IconAndLabel": 0,
                "IconOnly": 1,
                "LabelOnly": 2
            }
        }
        Property { name: "items"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "displayMode"; type: "int" }
    }
    Component {
        prototype: "QQuickWindowQmlImpl"
        name: "Blusher/Window 0.1"
        exports: ["Blusher/Window 0.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Enum {
            name: "WindowType"
            values: {
                "DocumentWindow": 0,
                "AppWindow": 1,
                "Panel": 2,
                "Dialog": 3,
                "Alert": 4
            }
        }
        Property { name: "type"; type: "int" }
        Property { name: "menu"; type: "Menu_QMLTYPE_0"; isPointer: true }
        Property { name: "toolbar"; type: "Toolbar_QMLTYPE_3"; isPointer: true }
        Property { name: "body"; type: "QQuickItem"; isPointer: true }
        Property { name: "windowHeight"; type: "int" }
        Property { name: "windowWidth"; type: "int" }
        Property { name: "minimumFrameWidth"; type: "int" }
        Property { name: "minimumFrameHeight"; type: "int" }
        Property { name: "minimumBodyWidth"; type: "int" }
        Property { name: "minimumBodyHeight"; type: "int" }
        Property { name: "maximized"; type: "bool"; isReadonly: true }
        Method { name: "giveGlobalFocus"; type: "QVariant" }
        Method { name: "_windowFlags"; type: "QVariant" }
    }
}
